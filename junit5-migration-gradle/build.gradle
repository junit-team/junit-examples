plugins {
	id 'com.gradle.build-scan' version '2.0.2'
	id 'java'
	id 'eclipse' // optional (to generate Eclipse project files)
	id 'idea' // optional (to generate IntelliJ IDEA project files)
}

int javaVersion = Integer.valueOf(JavaVersion.current().getMajorVersion())
if (javaVersion < 9) {
    apply plugin: 'jacoco'
}

buildScan {
	termsOfServiceUrl = "https://gradle.com/terms-of-service"
	termsOfServiceAgree = "yes"
}

repositories {
	mavenCentral()
}

dependencies {
	def junit4Version        = '4.12'
	def junitVintageVersion  = '5.3.2'
	def junitJupiterVersion  = '5.3.2'
	def junitPlatformVersion = '1.3.2'

	// JUnit Jupiter API and TestEngine implementation
	testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

	testCompile("junit:junit:${junit4Version}")
	testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}") {
		because 'allows JUnit 3 and JUnit 4 tests to run'
	}

	testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}") {
		because 'allows tests to run from IDEs that bundle older version of launcher'
	}
}

if (project.plugins.findPlugin('jacoco')) {
    jacoco {
        toolVersion = '0.8.1'
    }
}

test {
	useJUnitPlatform {
		// includeEngines 'junit-jupiter', 'junit-vintage'
		// excludeEngines 'custom-engine'

		// includeTags 'fast'
		excludeTags 'slow'
	}

	testLogging {
		events 'passed', 'skipped', 'failed'
	}

    if (project.plugins.findPlugin('jacoco')) {
        finalizedBy jacocoTestReport
    }
}

wrapper {
	gradleVersion = '5.0'
}
